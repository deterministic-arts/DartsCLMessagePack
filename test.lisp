
(defpackage #:darts.lib.message-pack-test
  (:use #:common-lisp #:darts.lib.message-pack #:stefil #:trivial-octet-streams)
  (:export))

(in-package #:darts.lib.message-pack-test)

(in-root-suite)

(defsuite message-pack-suite)

(in-suite message-pack-suite)


(defun call-with-serializer-deserializer (serializer deserializer)
  (let ((stream (make-octet-output-stream)))
    (funcall serializer stream)
    (close stream)
    (let* ((octets (get-output-stream-octets stream))
           (stream (make-octet-input-stream octets)))
      (funcall deserializer stream)
      (close stream)
      nil)))

(defmacro roundtripping ((stream) serializer &body deserializer)
  `(call-with-serializer-deserializer (lambda (,stream) ,serializer)
                                      (lambda (,stream) ,@deserializer)))

(deftest unsigned-integer-serialization ()
  (roundtripping (stream)
                 (progn (write-packed-integer 0 stream)
                        (write-packed-integer #x7F stream)
                        (write-packed-integer #xFF stream)
                        (write-packed-integer #x7FFF stream)
                        (write-packed-integer #xFFFF stream)
                        (write-packed-integer #x7FFFFFFF stream)
                        (write-packed-integer #xFFFFFFFF stream)
                        (write-packed-integer #x7FFFFFFFFFFFFFFF stream)
                        (write-packed-integer #xFFFFFFFFFFFFFFFF stream))
    (macrolet ((assert-integer (expected)
                 (let ((value (gensym))
                       (kind (gensym))
                       (tag (gensym)))
                   `(multiple-value-bind (,value ,kind ,tag) (read-packed-value stream)
                      (is (eq ,kind :integer))
                      (is (eql ,value ,expected))
                      (is (null ,tag))))))
      (assert-integer 0)
      (assert-integer #x7F)
      (assert-integer #xFF)
      (assert-integer #x7FFF)
      (assert-integer #xFFFF)
      (assert-integer #x7FFFFFFF)
      (assert-integer #xFFFFFFFF)
      (assert-integer #x7FFFFFFFFFFFFFFF)
      (assert-integer #xFFFFFFFFFFFFFFFF))))


(deftest signed-integer-serialization ()
  (roundtripping (stream)
                 (progn (write-packed-integer 0 stream)
                        (write-packed-integer -1 stream)
                        (loop
                          :for bit :in '(4 5 6 7 8 15 16 31 32 62)
                          :do (let ((boundary (expt 2 bit)))
                                (write-packed-integer (- (1- boundary)) stream)
                                (write-packed-integer (- boundary) stream)
                                (write-packed-integer (- (1+ boundary)) stream)))
                        (write-packed-integer (- (expt 2 63)) stream))
    (macrolet ((assert-integer (expected)
                 (let ((value (gensym))
                       (kind (gensym))
                       (tag (gensym)))
                   `(multiple-value-bind (,value ,kind ,tag) (read-packed-value stream)
                      (is (eq ,kind :integer))
                      (is (eql ,value ,expected))
                      (is (null ,tag))))))
      (assert-integer 0)
      (assert-integer -1)
      (loop
        :for bit :in '(4 5 6 7 8 15 16 31 32 62)
        :do (let ((boundary (expt 2 bit)))
              (assert-integer (- (- boundary 1)))
              (assert-integer (- boundary))
              (assert-integer (- (1+ boundary)))))
      (assert-integer (- (expt 2 63)))
      )))


(deftest boolean-serialization ()
  (roundtripping (stream)
                 (progn 
                   (write-packed-null stream)
                   (write-packed-boolean t stream)
                   (write-packed-boolean nil stream))
    (multiple-value-bind (value kind) (read-packed-value stream)
      (is (eq kind :null))
      (is (not value)))
    (multiple-value-bind (value kind) (read-packed-value stream)
      (is (eq kind :boolean))
      (is value))
    (multiple-value-bind (value kind) (read-packed-value stream)
      (is (eq kind :boolean))
      (is (null value)))))
        

